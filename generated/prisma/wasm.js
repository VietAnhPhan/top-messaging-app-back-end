
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.1
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.1",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  username: 'username',
  email: 'email',
  password: 'password',
  isAdmin: 'isAdmin',
  about: 'about',
  phone: 'phone',
  created_at: 'created_at',
  isActive: 'isActive',
  avatarPath: 'avatarPath',
  uuid: 'uuid'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  sid: 'sid',
  data: 'data',
  expiresAt: 'expiresAt'
};

exports.Prisma.ConversationScalarFieldEnum = {
  id: 'id',
  userIds: 'userIds',
  initiatorId: 'initiatorId',
  createdAt: 'createdAt',
  isActive: 'isActive',
  uuid: 'uuid',
  modifiedAt: 'modifiedAt'
};

exports.Prisma.MessageScalarFieldEnum = {
  id: 'id',
  message: 'message',
  conversationId: 'conversationId',
  userId: 'userId',
  createdAt: 'createdAt',
  isActive: 'isActive',
  isSeen: 'isSeen'
};

exports.Prisma.ChatMemberScalarFieldEnum = {
  id: 'id',
  conversationId: 'conversationId',
  userId: 'userId',
  createdAt: 'createdAt',
  isActive: 'isActive'
};

exports.Prisma.MediaScalarFieldEnum = {
  id: 'id',
  messageId: 'messageId',
  filePath: 'filePath',
  type: 'type',
  isActive: 'isActive',
  createdAt: 'createdAt'
};

exports.Prisma.FriendRequestScalarFieldEnum = {
  id: 'id',
  senderId: 'senderId',
  receiverId: 'receiverId',
  createdAt: 'createdAt',
  isActive: 'isActive',
  status: 'status'
};

exports.Prisma.FriendScalarFieldEnum = {
  id: 'id',
  friendId: 'friendId',
  loginuserId: 'loginuserId',
  status: 'status',
  createdAt: 'createdAt',
  isActive: 'isActive'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.MediaType = exports.$Enums.MediaType = {
  image: 'image',
  video: 'video',
  audio: 'audio'
};

exports.FriendStatus = exports.$Enums.FriendStatus = {
  pending: 'pending',
  friends: 'friends',
  stranger: 'stranger'
};

exports.FriendRequestStatus = exports.$Enums.FriendRequestStatus = {
  pending: 'pending',
  accepted: 'accepted',
  rejected: 'rejected',
  cancel: 'cancel',
  unfriend: 'unfriend'
};

exports.Prisma.ModelName = {
  User: 'User',
  Session: 'Session',
  Conversation: 'Conversation',
  Message: 'Message',
  ChatMember: 'ChatMember',
  Media: 'Media',
  FriendRequest: 'FriendRequest',
  Friend: 'Friend'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "/home/vietanhphan/the_odin_project/projects/top-messaging-app-back-end/generated/prisma",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "debian-openssl-3.0.x",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "/home/vietanhphan/the_odin_project/projects/top-messaging-app-back-end/prisma/schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../.env"
  },
  "relativePath": "../../prisma",
  "clientVersion": "6.16.1",
  "engineVersion": "1c57fdcd7e44b29b9313256c76699e91c3ac3c43",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "// This is your Prisma schema file,\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\n\n// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?\n// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init\n\ngenerator client {\n  provider = \"prisma-client-js\"\n  output   = \"../generated/prisma\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel User {\n  id           Int             @id @default(autoincrement())\n  name         String\n  username     String          @unique\n  email        String          @unique\n  password     String\n  isAdmin      Boolean         @default(false)\n  about        String?         @default(\"Hi, I am using Messaging App!\")\n  phone        String?         @unique\n  created_at   DateTime        @default(now())\n  isActive     Boolean         @default(true)\n  messages     Message[]\n  ChatMember   ChatMember[]\n  avatarPath   String?\n  friend       Friend[]        @relation(\"FriendUser\")\n  loginUser    Friend[]        @relation(\"LoginUser\")\n  sender       FriendRequest[] @relation(\"Sender\")\n  receiver     FriendRequest[] @relation(\"Receiver\")\n  Conversation Conversation[]\n  uuid         String?         @default(ulid())\n}\n\nmodel Session {\n  id        String   @id\n  sid       String   @unique\n  data      String\n  expiresAt DateTime\n}\n\nmodel Conversation {\n  id          Int          @id @default(autoincrement())\n  userIds     Int[]\n  messages    Message[]\n  ChatMember  ChatMember[]\n  initiator   User?        @relation(fields: [initiatorId], references: [id])\n  initiatorId Int?\n  createdAt   DateTime     @default(now())\n  isActive    Boolean      @default(true)\n  uuid        String?      @default(ulid())\n  modifiedAt  DateTime?    @default(now())\n}\n\nmodel Message {\n  id             Int          @id @default(autoincrement())\n  message        String\n  conversation   Conversation @relation(fields: [conversationId], references: [id])\n  conversationId Int\n  user           User         @relation(fields: [userId], references: [id])\n  userId         Int\n  createdAt      DateTime     @default(now())\n  isActive       Boolean      @default(true)\n  Media          Media[]\n  isSeen         Boolean      @default(false)\n}\n\nmodel ChatMember {\n  id             Int          @id @default(autoincrement())\n  conversation   Conversation @relation(fields: [conversationId], references: [id])\n  conversationId Int\n  user           User         @relation(fields: [userId], references: [id])\n  userId         Int\n  createdAt      DateTime     @default(now())\n  isActive       Boolean      @default(true)\n\n  @@unique([conversationId, userId])\n}\n\nmodel Media {\n  id        Int       @id @default(autoincrement())\n  message   Message   @relation(fields: [messageId], references: [id])\n  messageId Int\n  filePath  String\n  type      MediaType\n  isActive  Boolean   @default(true)\n  createdAt DateTime  @default(now())\n}\n\nenum MediaType {\n  image\n  video\n  audio\n}\n\nmodel FriendRequest {\n  id         Int                 @id @default(autoincrement())\n  sender     User                @relation(\"Sender\", fields: [senderId], references: [id])\n  senderId   Int\n  receiver   User                @relation(\"Receiver\", fields: [receiverId], references: [id])\n  receiverId Int\n  createdAt  DateTime            @default(now())\n  isActive   Boolean             @default(true)\n  status     FriendRequestStatus @default(pending)\n\n  @@unique([senderId, receiverId])\n}\n\nmodel Friend {\n  id          Int          @id @default(autoincrement())\n  friend      User         @relation(\"FriendUser\", fields: [friendId], references: [id])\n  friendId    Int\n  loginUser   User         @relation(\"LoginUser\", fields: [loginuserId], references: [id])\n  loginuserId Int\n  status      FriendStatus @default(friends)\n  createdAt   DateTime     @default(now())\n  isActive    Boolean      @default(true)\n\n  @@unique([loginuserId, friendId])\n}\n\nenum FriendStatus {\n  pending\n  friends\n  stranger\n}\n\nenum FriendRequestStatus {\n  pending\n  accepted\n  rejected\n  cancel\n  unfriend\n}\n",
  "inlineSchemaHash": "e88e03916cc85ff9311978cfaf8af264d41e686443e91aee42654bb3aa2ff436",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"User\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"username\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"password\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isAdmin\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"about\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"phone\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"created_at\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"messages\",\"kind\":\"object\",\"type\":\"Message\",\"relationName\":\"MessageToUser\"},{\"name\":\"ChatMember\",\"kind\":\"object\",\"type\":\"ChatMember\",\"relationName\":\"ChatMemberToUser\"},{\"name\":\"avatarPath\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"friend\",\"kind\":\"object\",\"type\":\"Friend\",\"relationName\":\"FriendUser\"},{\"name\":\"loginUser\",\"kind\":\"object\",\"type\":\"Friend\",\"relationName\":\"LoginUser\"},{\"name\":\"sender\",\"kind\":\"object\",\"type\":\"FriendRequest\",\"relationName\":\"Sender\"},{\"name\":\"receiver\",\"kind\":\"object\",\"type\":\"FriendRequest\",\"relationName\":\"Receiver\"},{\"name\":\"Conversation\",\"kind\":\"object\",\"type\":\"Conversation\",\"relationName\":\"ConversationToUser\"},{\"name\":\"uuid\",\"kind\":\"scalar\",\"type\":\"String\"}],\"dbName\":null},\"Session\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"sid\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"data\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"expiresAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Conversation\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"userIds\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"messages\",\"kind\":\"object\",\"type\":\"Message\",\"relationName\":\"ConversationToMessage\"},{\"name\":\"ChatMember\",\"kind\":\"object\",\"type\":\"ChatMember\",\"relationName\":\"ChatMemberToConversation\"},{\"name\":\"initiator\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ConversationToUser\"},{\"name\":\"initiatorId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"uuid\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"modifiedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Message\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"message\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"conversation\",\"kind\":\"object\",\"type\":\"Conversation\",\"relationName\":\"ConversationToMessage\"},{\"name\":\"conversationId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"MessageToUser\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"Media\",\"kind\":\"object\",\"type\":\"Media\",\"relationName\":\"MediaToMessage\"},{\"name\":\"isSeen\",\"kind\":\"scalar\",\"type\":\"Boolean\"}],\"dbName\":null},\"ChatMember\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"conversation\",\"kind\":\"object\",\"type\":\"Conversation\",\"relationName\":\"ChatMemberToConversation\"},{\"name\":\"conversationId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ChatMemberToUser\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"}],\"dbName\":null},\"Media\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"message\",\"kind\":\"object\",\"type\":\"Message\",\"relationName\":\"MediaToMessage\"},{\"name\":\"messageId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"filePath\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"type\",\"kind\":\"enum\",\"type\":\"MediaType\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"FriendRequest\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"sender\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"Sender\"},{\"name\":\"senderId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"receiver\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"Receiver\"},{\"name\":\"receiverId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"FriendRequestStatus\"}],\"dbName\":null},\"Friend\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"friend\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"FriendUser\"},{\"name\":\"friendId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"loginUser\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"LoginUser\"},{\"name\":\"loginuserId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"FriendStatus\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"}],\"dbName\":null}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

