// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int             @id @default(autoincrement())
  name         String
  username     String          @unique
  email        String          @unique
  password     String
  isAdmin      Boolean         @default(false)
  about        String?
  phone        String?         @unique
  created_at   DateTime        @default(now())
  isActive     Boolean         @default(true)
  messages     Message[]
  ChatMember   ChatMember[]
  avatarPath   String?
  friend       Friend[]        @relation("FriendUser")
  loginUser    Friend[]        @relation("LoginUser")
  sender       FriendRequest[] @relation("Sender")
  receiver     FriendRequest[] @relation("Receiver")
  Conversation Conversation[]
  uuid         String?         @default(ulid())
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
}

model Conversation {
  id          Int          @id @default(autoincrement())
  userIds     Int[]
  messages    Message[]
  ChatMember  ChatMember[]
  initiator   User?        @relation(fields: [initiatorId], references: [id])
  initiatorId Int?
  createdAt   DateTime     @default(now())
  isActive    Boolean      @default(true)
  uuid        String?      @default(ulid())
}

model Message {
  id             Int          @id @default(autoincrement())
  message        String
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId Int
  user           User         @relation(fields: [userId], references: [id])
  userId         Int
  createdAt      DateTime     @default(now())
  isActive       Boolean      @default(true)
  Media          Media[]
}

model ChatMember {
  id             Int          @id @default(autoincrement())
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId Int
  user           User         @relation(fields: [userId], references: [id])
  userId         Int
  createdAt      DateTime     @default(now())
  isActive       Boolean      @default(true)

  @@unique([conversationId, userId])
}

model Media {
  id        Int       @id @default(autoincrement())
  message   Message   @relation(fields: [messageId], references: [id])
  messageId Int
  filePath  String
  type      MediaType
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
}

enum MediaType {
  image
  video
  audio
}

model FriendRequest {
  id         Int                 @id @default(autoincrement())
  sender     User                @relation("Sender", fields: [senderId], references: [id])
  senderId   Int
  receiver   User                @relation("Receiver", fields: [receiverId], references: [id])
  receiverId Int
  createdAt  DateTime            @default(now())
  isActive   Boolean             @default(true)
  status     FriendRequestStatus @default(pending)

  @@unique([senderId, receiverId])
}

model Friend {
  id          Int          @id @default(autoincrement())
  friend      User         @relation("FriendUser", fields: [friendId], references: [id])
  friendId    Int
  loginUser   User         @relation("LoginUser", fields: [loginuserId], references: [id])
  loginuserId Int
  status      FriendStatus @default(friends)
  createdAt   DateTime     @default(now())
  isActive    Boolean      @default(true)

  @@unique([loginuserId, friendId])
}

enum FriendStatus {
  pending
  friends
  stranger
}

enum FriendRequestStatus {
  pending
  accepted
  rejected
}
